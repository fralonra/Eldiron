name: Rust

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

jobs:
  build_and_test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        working-directory: ["creator", "clients/client"]

    runs-on: ${{ matrix.os }}

    steps:
      # ────────────────────────────────────────────────────────────────────────────
      # 1. Checkout
      # ────────────────────────────────────────────────────────────────────────────
      - uses: actions/checkout@v3

      # ────────────────────────────────────────────────────────────────────────────
      # 2. Windows-only: lift the 260-char limit + shorten Cargo/Rustup locations
      # ────────────────────────────────────────────────────────────────────────────
      - name: Windows – allow long paths & move Cargo home
        if: runner.os == 'Windows'
        shell: bash
        run: |
          # 2a) Tell Git to use the long-path prefix (\\?\)
          git config --system core.longpaths true

          # 2b) Put Cargo/Rustup/target in ultra-short folders on C:\
          echo "CARGO_HOME=C:\\c"                 >> $GITHUB_ENV
          echo "RUSTUP_HOME=C:\\r"                >> $GITHUB_ENV
          echo "CARGO_TARGET_DIR=C:\\t"           >> $GITHUB_ENV

          # 2c) Tell Cargo to fetch git deps with the Git CLI (which obeys 2a)
          echo "CARGO_NET_GIT_FETCH_WITH_CLI=true" >> $GITHUB_ENV

      # ────────────────────────────────────────────────────────────────────────────
      # 3. Linux-only build dependencies (ALSA, GTK)
      # ────────────────────────────────────────────────────────────────────────────
      - name: Prepare (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev libgtk-3-dev
          pkg-config --libs --cflags alsa

      # ----- Install the toolchain (all OSes) -------------------------
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      # ────────────────────────────────────────────────────────────────────────────
      # 4. Build
      # ────────────────────────────────────────────────────────────────────────────
      - name: Build
        shell: bash
        working-directory: ${{ matrix.working-directory }}
        run: |
          cargo build --verbose

      # ────────────────────────────────────────────────────────────────────────────
      # 5. Build Web
      # ────────────────────────────────────────────────────────────────────────────
      - name: Build Web
        shell: bash
        working-directory: ${{ matrix.working-directory }}
        if: ${{ matrix.working-directory == 'clients/client' }}
        run: |
          rustup target add wasm32-unknown-unknown
          cargo build --verbose --target wasm32-unknown-unknown

      # ────────────────────────────────────────────────────────────────────────────
      # 6. (optional) tests
      # ────────────────────────────────────────────────────────────────────────────
      # - name: Run tests
      #   shell: bash
      #   working-directory: ${{ matrix.working-directory }}
      #   run: |
      #     cargo test --verbose
